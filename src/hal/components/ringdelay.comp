component delay "A delay by means of a circular buffer";
pin in float in "The input value that is to be delayed";
pin out float out "The value of \\fBin\\fR shown after the specified \\fBtime\\fR.";
pin in float time "The delay time of \\fBin\\fR to \\fBout\\fR.";
description """
This component will delay the signal of the \\fBin\\ for a given \\fBtime\\fR
to the signal \\fBout\\fR when the \\fBEN\\fR parameter is \\fB1\\fR.
.LP
When time equals \"0\" then the reading position of the ringbuffer equals the
writing position. Thus \\fBout\\fR equals \\fB\\fR.
.LP
When \\fBtime\\fR is increased, say for ease of understanding that it was
\\fB0\\fR, and is set to \\fB10\\fR periods. The reading position will wait 10
periods (so it is not increased) while the writing position will increase with
each period. If the reading position equals its target delay then it will also
increase with each period.
.LP
When \\fBtime\\fR is decreased, for example: it was \\fB10\\fR, and is set to
\\fB3\\fR periods. The writing position will now wait 7 periods (so it is not
increased) while the reading position will increase with each period until it
has reached the target delay.
.LP
The \\fBtime\\fR must never be greater than the (max size -1) of the ring. and
is then limited to (max size -1)
""";
author "Bas de Bruijn";
license "GPL"; // indicates GPL v2 or later

function _;
;;


int rtapi_app_main(void)
{
    int retval;

    comp_id = hal_init(name);
    if (comp_id < 0) {
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: hal_init() failed: %d\n",
			name, comp_id);
	return -1;
    }
    if ((retval = hal_ring_attach(ring, &rb, NULL))) {
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: hal_ring_attach(%s) failed: %d\n",
			name, ring, retval);
	return -1;
    }
    rb.header->writer = comp_id;
    rb.header->writer_instance = rtapi_instance;
    if ((retval = export(name, 0))) {
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: export(%s) failed: %d\n",
			name, name, retval);
	return -1;
    }
    hal_ready(comp_id);
    rtapi_print_msg(RTAPI_MSG_ERR,
		    "%s: attached to %s reader=%d writer=%d\n",
		    name, ring, rb.header->reader, rb.header->writer);

    return 0;
}

void rtapi_app_exit(void)
{
    int retval;
    rb.header->writer = 0;
    if ((retval = hal_ring_detach(ring, &rb)) < 0)
	rtapi_print_msg(RTAPI_MSG_ERR,
			"%s: ERROR: hal_ring_detach(%s) failed: %d\n",
			name, ring, retval);
    hal_exit(comp_id);
}
